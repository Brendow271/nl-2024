-------------Динамическая типизация--------------------------
a = 123 -- переменная a имеет тип number
print(type(a))
a = "123" -- теперь переменная a имеет тип string
print(type(a))
a = true -- теперь переменная a имеет тип boolean
print(type(a))
a = {} -- теперь переменная a имеет тип table
print(type(a))
a = print -- теперь переменная a имеет тип function
print(type(a))
-------------------------------------------------------------

------------Глобальные и локальные переменные----------------
print(b)
b = 5   --глобальная переменная
print(b)

local i = 1 --локальна в пределах скрипта
while i <= b do
    local b = i^2 -- b локальна внутри while
    print(b)
    i = i + 1
end
print(b) --обращение к глобальной b
print(i)
------------------------------------------------------------
-------------------number-----------------------------------
print(12.7 - 20 + 7.3)

n = 4
print(type(n), n)

n = 0.4
print(type(n), n)

n = 4.57e-3
print(type(n), n)

n = 0.3e12
print(type(n), n)

n = 5E+20
print(type(n), n)

n = 0xff --255
print(type(n), n)

n = 0x1A3 --419
print(type(n), n)

n = 0x0.2 --0.125
print(type(n), n)

n = 0x1p-1 --0.5
print(type(n), n)

n = 0xa.bp2 --42.75
print(type(n), n)
-----------------------------------------------------------
---------------------------string--------------------------
a = "one string"
b = string.gsub(a, "one", "another") 
--[[возвращает копию строки,в которой 
все вхождения 'шаблона поиска' 
заменяются на 'шаблон замены']]
print(#a, a) 
print(#b, b) 

str1 = "'cat'"
print(str1)

str2 = '"dog"'
print(str2)

lit1 = 'alo\n123'
lit2 = '\97lo\10\04923'
--[[97 — это код ASCII для 'а', 10 — это код для
символа перевода строки, а 49 — это код для цифры '1']]
lit3 = '\x61\x6c\x6f\x0a\x31\x32\x33\x22'
print(lit1)
print(lit2)
print(lit3)

page = [[
<html>
<head>
\t<title>An HTML Page</title>
</head>
<body>
\t<a href="http://www.lua.org">Lua</a>
</body>
</html>
]]
print(page)

code = [===[a = b[c[i]]]===] --a = b[c[i]]
print(code)

data = "London is the capital\z
 of Great Britain"
print(data)
--------------------------------------------------------
--------------------table-------------------------------
--[[создание и инициализация]]
t = {} -- создаем пустую таблицу
t[1] = "first" -- новое поле таблицы, с ключом 1 и значением "first"			
t[2] = 20 -- новое поле, с ключом 2 и значением 20
name = "somebody"
t[name] = "Jane" -- новое поле, с ключом "name" и значением "Jane"
a = t[1] -- переменная a получает значение "first"
b = t[2] -- переменная b получает значение 20
c = t[name] -- переменная a получает значение поля "somebody" ("Jane")
d = t.name  -- поля "name" не существует, переменная b получает nil
e = t.somebody -- переменная c получает значение поля "somebody" ("Jane")
print(a, b, c, d, e)

--[[анонимность]]
a = {}
a["x"] = 10
b = a -- 'b' ссылается на ту же таблицу, что и 'a'
print(b["x"]) --> 10
b["x"] = 20
print(a["x"]) --> 20
a = nil -- лишь 'b' по-прежнему ссылается на ту таблицу
b = nil -- ссылок на таблицу не осталось

t = {["red"]="красный", ["green"]="зеленый", ["blue"]="синий"} --можно сразу заполнить
--эквивалентно
t = {}
t.red = "красный"; t.green = "зеленый"; t.blue = "синий"
--или
t = {red="красный", green="зеленый", blue="синий"} 
--[[В случае строковых ключей квадратные скобки 
(и двойные кавычки) можно не указывать]]

--массив:
-- считывает 5 строк, сохраняя их в таблице
a = {}
for i = 1, 5 do
    a[i] = i
end
-- Печать заполненного массива
for i = 1, #a do
    print(a[i])
end
-------------------------------------------------------
------------------function-----------------------------
function f(x,y) --ключевое слово, имя, аргументы
    return x*y -- тело функции
 end
--эквивалентно
--[[
f = function (x,y)
   return x*y -- тело функции
end

function f(x,y) return x*y end

]]

print(f(2,3))
func = f -- переменная funk ссылается на ту же функцию, что и f
print(func(4,3))
func_table = {}
func_table.mult = f -- поле mult таблицы func_table ссылается на ту же функцию, что и f
f = print --f теперь ссылается на функцию print
f(func(5,3))
---------------------------------------------------------
--------------------приведение типов---------------------
print("10" + 1) --> 11
print("10 + 1") --> 10 + 1
print("-5.3e-10"*"2") --> -1.06e-09
--print("hello" + 1) -- ОШИБКА (невозможно преобразовать "hello")
print(10 .. 20) --> 1020 --.. - конкатенация

print(tostring(10) == "10") --> true
print(10 .. "" == "10") --> true (конкатенация с пустой строкой)
print(tonumber("10") == 10)
print(tonumber ("10"..".5") == 10.5)


